Design for Traffic controller system for a Junction
This traffic controller can:
1.	Use centralized controlling system
2.	Use traffic light for controlling
3.	Use different signal on different use cases
4.	Supports different kind of crosses 
5.	Work for both pedestrian and vehicle
6.	Intelligent time control system together with default system
7.	Traffic violation detection
8.	The whole system is using observer pattern
-----------------------------------------------------------------------------------------------------------------------------
Class: TrafficControlCentre
# This traffic control centre consider each cross as a smallest unit.
Data: cross_list

Behavior:
attach_cross()
traffic_monitor()
modify_cross_light_duration()

-----------------------------------------------------------------------------------------------------------------------------

Class: TrafficCondition
Data: road_list, road_cross_map
Behavior:
traffic_evaluator()

-----------------------------------------------------------------------------------------------------------------------------
Class: TrafficCross
# different cross can attach different traffic light
Data:cross_light_labels

Behavior:
attach(TrafficLight)
traffic_signal_count_down()
update_traffic_light()
update_traffic_light_duration()

-----------------------------------------------------------------------------------------------------------------------------

Class: TrafficControllerState
Data:
default_duration,
Behavior:
display()

ChildrenClass: TrafficControllerWarningState,TrafficControllerGoState,TrafficControllerStopState 
-----------------------------------------------------------------------------------------------------------------------------

Class: TrafficLight
Data: light_label,
      possible_states

Behavior:
attach(TrafficControllerState)

ChildrenClass: PedestrationLight, ArrowStraightLight, ArrowLeftLight, ArrowRightLight, RoundLight.


-----------------------------------------------------------------------------------------------------------------------------
Class: RedLightCamera
Data: 
Behavior:
detect_vehicle_movement_on_redlight()
detect_vehicle_license_and_report()


-----------------------------------------------------------------------------------------------------------------------------

Design for a Car Rental System 
1. User can rent car from UI
2. got recommendation on system selected vehicles
3. users can get from UI, parking spot and plate info, then pickup keys from keybox. 
4. while return, users need to drop keys and enter new parking spot.
5. Administrator can register new vehicle, deactivate user and register new user.
6. price will be calculated while returning the vehicle.

-----------------------------------------------------------------------------------------------------------------------------
Class: UserInteractiveInterface
Data:
user_permission_level
account_balance
car_recommendation_list

Behavior:
user_login()
user_registration()
calculate_cost()
payment()
generate_keybox_passcode()

-----------------------------------------------------------------------------------------------------------------------------
Class: User
Data: 
user_id
permission_level
account_balance

Behavior:
rent_vehicle()
return_vehicle()
customized_recommendation()

ChildClass: Administrator(User)
Data:

Behavior:
user_registration()
vehicle_registration()
deactivate_user()

-----------------------------------------------------------------------------------------------------------------------------
Class: Vehicle
Data:
vehicle_id
vehicle_size
estimated_return_date
parking_spot

Behavior:
register_new_vehicle()
assign_parking_spot()

-----------------------------------------------------------------------------------------------------------------------------
Class: KeysBox
Data:
plat_keys_pair = {}

Behvior:
pickup_key()
return_key()
Behavior:
register_new_vehicle()
update_vehicle_parking_spot()
sync_passcode()
validate_key()

==============================================================================================================================

Design a Course Registration Platform
1. students can register on courses under course restriction
2. students can only register course under certain number of credits per semester
3. one student can only have one course at the same time
4. same class room can only hold one course at the same time.
5. students can drop course, but if he/she uses permission code, he/she needs another code to register again
6. courses have permission code generated by instructor
7. 
-----------------------------------------------------------------------------------------------------------------------------
Class: Course
Data: 
restriction
course_introduction
course_credit
max_capacity
course_classroom
course_time
frequency
active_permission_code
-----------------------------------------------------------------------------------------------------------------------------
Class: Student
Data:
school
major
registered_credits
Behavior:
register_course()
drop_couse()
-----------------------------------------------------------------------------------------------------------------------------
Class: Teacher
Data:
course_list

Behavior:
update_course_information()
create_new_course()
create_permission_code()


==============================================================================================================================
Design for a vending Machine (will accept coins of different denominations and vends out candies, soda etc)
1. from vending machine, users can insert coin, papery money. Vending machine will add to current balance, if swipe card, just try to validate.
2. each tray has its own state
3. while trying to vend items, tray will first try dispense item, send message back, then change its own state.
4. After successfully vended items, vending machine will reduce money balance and if finished, eject change. If for card, send payment information to bank. 
5. use State Pattern 
-----------------------------------------------------------------------------------------------------------------------------
Class: VendingMachine
Data:
total_balance
Behavior:
insert_coins()
insert_paper_money()
swipe_card()
money_detector()
eject_change()
request_tray_state()
price_query()

-----------------------------------------------------------------------------------------------------------------------------
Class: VendingMachineTrayState
Data:
state, # can be SOLD, SOLD_OUT, VENDING, COUNT
price
Behavior:
dispense(), # different kind of tray may have different kind of way dispensing
handle_state()
-----------------------------------------------------------------------------------------------------------------------------
Class: Operator
Data:
operator_id
Behavior:
modify_price()
reset_tray_state()

==============================================================================================================================
Design for a Parking lot
1. This is a parking lot with valet system
2. System will assign a parking spot based on car size and track car movement vehicle was parked on correct spot.
3. If vehicles was parked to the wrong spot, he/she will be charged for both spot, and new spot will be freezed.

-----------------------------------------------------------------------------------------------------------------------------
Class: Entrance
Data: entrance_label
current_vehicle_information: {size, plate, make, electric}
Behavior:
prepare_parking_spot_for_next_vehicle()
vehicle_information_detect()
assign_and_freeze_parking_spot()

-----------------------------------------------------------------------------------------------------------------------------
Class: Exit
Data: exit_label
Behavior:
calculate_overall_cost()
payment()
unfreeze_parking_lot()

-----------------------------------------------------------------------------------------------------------------------------
Class: ParkingLot
Data: 
parking_lot_id
capacity_dictionary = {parking_spot_label: size}

-----------------------------------------------------------------------------------------------------------------------------
Class: ValetMonitor
Data:
monitor_label
vehicle_parking_map: {plate: destination_spot}

Behavior:
vehicle_movement_detection() # make sure vehicle got parked into correct parking spot, if not send out alarm
_freeze_misparked_spots()


-----------------------------------------------------------------------------------------------------------------------------




